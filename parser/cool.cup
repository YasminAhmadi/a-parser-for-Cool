/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;

nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal Expression exp;
nonterminal Expression letexp;
nonterminal Expressions exprs;
nonterminal Expressions exp_list;
nonterminal Case case_exp;
nonterminal Cases case_exp_list;
nonterminal attr attribute;
nonterminal method method;
nonterminal Expressions exp_disp;

/* Precedence declarations go here. */
precedence left ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;
/* If no parent is specified, the class inherits from the Object class */

class  /* class <type> inherits <type> { <feature_list> }; */
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
        /* Handling errors */
        | CLASS error LBRACE feature_list:f RBRACE SEMI
            {: RESULT = null; :}
        | CLASS TYPEID:n INHERITS error LBRACE feature_list:f RBRACE SEMI
            {: RESULT = null; :}
        | error
            {: RESULT = null; :}
	;

feature_list
        ::= 
            {: RESULT = new Features(curr_lineno()); :}
        | feature_list:f1  feature:f2  SEMI
            {: if (f1 != null) { RESULT = f1.appendElement(f2); }
               else { RESULT = new Features(curr_lineno()).appendElement(f2); } :}
        | error:e SEMI
            {: RESULT = null; :}
        ;
feature /* attribute or method */
        ::= attribute:e
            {: RESULT = e; :}
        | method:e
            {: RESULT = e; :}
        ;

attribute /* <object>:<type>; */
        ::= OBJECTID:a1 COLON TYPEID:a2
            {: RESULT = new attr(curr_lineno(), a1, a2, new no_expr(curr_lineno())); :}
        | OBJECTID:a1 COLON TYPEID:a2 ASSIGN exp:a3
            {: RESULT = new attr(curr_lineno(), a1, a2, a3); :}
        ;

method  /* <object> ( formals ) : <type> { exp } */
        ::= OBJECTID:m1 LPAREN formal_list:m2 RPAREN COLON TYPEID:m3 LBRACE exp:m4 RBRACE
        {: RESULT = new method(curr_lineno(), m1, m2, m3, m4); :}
        ;



formal_list /* formal , formal */
	::=
		{: RESULT = new Formals(curr_lineno()); :}
	| formal:fo
		{: RESULT = (new Formals(curr_lineno())).appendElement(fo); :}
	| formal_list:fol COMMA formal:fo
		{: RESULT = fol.appendElement(fo); :}
	| error
		{: RESULT = new Formals(curr_lineno()); :}
	;
formal /* <object> : <type> */
	::= OBJECTID:o COLON TYPEID:t
		{: RESULT = new formalc(curr_lineno(), o, t); :}
	;

case_exp_list /* case -->  case  <exp> of <object> : <type1> => <exp1>; ... <objectn> : <typen> => <expn>;  esac */

        ::= case_exp:c1
            {: RESULT = new Cases(curr_lineno()).appendElement(c1); :}
        | case_exp_list:c1 case_exp:c2
            {: RESULT = c1.appendElement(c2); :}
        ;
case_exp  /* <object> : <type> => <exp>; */
        ::= OBJECTID:c1 COLON TYPEID:c2 DARROW exp:c3 SEMI
            {: RESULT = new branch(curr_lineno(), c1, c2, c3); :}
        ;

/* dispatch */
/* <exp>.<object>(<exp>, ... ,<exp>) */
/* <exp> @ <type>.<object> (<exp>, ... ,<exp>)
/* $eliminated$ self. $$ <type>.<object>(<exp>, ... , <exp>) */

exp_disp ::= 
		{: RESULT=new Expressions(curr_lineno()); :}
		| exp:e
		{: RESULT=(new Expressions(curr_lineno())).appendElement(e); :}
		| exp_disp:el COMMA exp:e
		{: RESULT=el.appendElement(e); :}
		;
/* let <id1> : <type1> [ <- <expr1> ], ..., <idn> : <typen> [ <- <exprn> ] in <expr> */
letexp
        ::= OBJECTID:l1 COLON TYPEID:l2 IN exp:l4
            {: RESULT = new let(curr_lineno(), l1, l2, new no_expr(curr_lineno()), l4); :}
        | OBJECTID:l1 COLON TYPEID:l2 COMMA letexp:l4
            {: RESULT = new let(curr_lineno(), l1, l2, new no_expr(curr_lineno()), l4); :}
        | OBJECTID:l1 COLON TYPEID:l2 ASSIGN exp:l3 IN exp:l4
            {: RESULT = new let(curr_lineno(), l1, l2, l3, l4); :}
        | OBJECTID:l1 COLON TYPEID:l2 ASSIGN exp:l3 COMMA letexp:l4
            {: RESULT = new let(curr_lineno(), l1, l2, l3, l4); :}
        | error IN exp
            {: RESULT = null; :}
        | error COMMA letexp:l4
            {: RESULT = l4; :}
        ;
/* { <expr>; ... <expr>;  }*/
exp_list
        ::= exp:l1 SEMI
            {: RESULT = new Expressions(curr_lineno()).appendElement(l1); :}
        | exp_list:l1 exp:l2 SEMI
            {: if (l1 != null) { RESULT = l1.appendElement(l2); } 
               else { RESULT = new Expressions(curr_lineno()).appendElement(l2); } :}
        | error SEMI
            {: RESULT = null; :}
       ;
exp 
        ::= exp:e1 MULT exp:e2
            {: RESULT = new mul(curr_lineno(), e1, e2); :}
        | exp:e1 DIV exp:e2
            {: RESULT = new divide(curr_lineno(), e1, e2); :}
        |  exp:e1 PLUS exp:e2
            {: RESULT = new plus(curr_lineno(), e1, e2); :}
        | exp:a1 MINUS exp:a2
            {: RESULT = new sub(curr_lineno(), a1, a2); :}
        | NEG exp:a1
            {: RESULT = new neg(curr_lineno(), a1); :}
        | INT_CONST:a1
            {: RESULT = new int_const(curr_lineno(), a1); :}
        | STR_CONST:a1
            {: RESULT = new string_const(curr_lineno(), a1); :}
        | BOOL_CONST:a1
            {: RESULT = new bool_const(curr_lineno(), a1); :}
        | exp:e1 LT exp:e2
            {: RESULT = new lt(curr_lineno(), e1, e2); :}
        | exp:e1 LE exp:e2
            {: RESULT = new leq(curr_lineno(), e1, e2); :}
        | exp:a1 EQ exp:a2
            {: RESULT = new eq(curr_lineno(), a1, a2); :}
        | NOT exp:a1
            {: RESULT = new comp(curr_lineno(), a1); :}
        | LPAREN exp:a1 RPAREN
            {: RESULT = a1; :}
        | OBJECTID:a1
            {: RESULT = new object(curr_lineno(), a1); :}
        | OBJECTID:a1 ASSIGN exp:a2
            {: RESULT = new assign(curr_lineno(), a1, a2); :}
        /*dispatch*/
        | exp:e1 DOT OBJECTID:o LPAREN exp_disp:e2 RPAREN
	   {: RESULT=new dispatch(curr_lineno(), e1, o, e2); :}
	   
	   // Local method dispatch with implied "self" object param
        | OBJECTID:o LPAREN exp_disp:e1 RPAREN
	   {: RESULT=new dispatch(curr_lineno(), 
	       new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, e1); :}
        /*case*/
        /*case <expr0> of
              case_exp_list
               <id1> : <type1> => <expr1>; ...
               <idn> : <typen> => <exprn>;
             
        esac*/
        | CASE exp:a1 OF case_exp_list:a2 ESAC
            {: RESULT = new typcase(curr_lineno(), a1, a2); :}
        /*if else then*/
        | IF exp:a1 THEN exp:a2 ELSE exp:a3 FI
            {: RESULT = new cond(curr_lineno(), a1, a2, a3); :}
        /*while loop pool*/
        | WHILE exp:a1 LOOP exp:a2 POOL
            {: RESULT = new loop(curr_lineno(), a1, a2); :}
        /*block*/
        | LBRACE exp_list:a1 RBRACE
            {: RESULT = new block(curr_lineno(), a1); :}
        /*let in*/
        | LET letexp:a1
            {: RESULT = a1; :}
        | NEW TYPEID:a1
            {: RESULT = new new_(curr_lineno(), a1); :}
        | ISVOID exp:a1
            {: RESULT = new isvoid(curr_lineno(), a1); :}
        |error
            {: RESULT = new no_expr(curr_lineno()); :}
        ;

